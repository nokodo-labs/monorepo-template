name: Docker Build and Deploy

on:
  workflow_call:
    inputs:
      release_version:
        type: string
        description: "Release version if a release happened (empty = no release)"
        required: false
        default: ""
  workflow_dispatch:
    inputs:
      release_tag:
        description: "The tag of the release"
        required: false
        default: "test-release"
      python-version:
        type: string
        description: "Python version to use for the workflow"
        required: false
        default: ""

jobs:
  build-and-deploy:
    name: Build container and deploy to registries
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v5

      - name: Set python version
        id: set_python_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ -n "${{ github.event.inputs.python-version }}" ]; then
              echo "PYTHON_VERSION=${{ github.event.inputs.python-version }}" >> $GITHUB_OUTPUT
            elif [ -f backend/.python-version ]; then
              ver=$(cat backend/.python-version | tr -d '\r' | head -n1)
              echo "PYTHON_VERSION=$ver" >> $GITHUB_OUTPUT
            else
              echo "Error: backend/.python-version not found and no input provided" >&2
              exit 1
            fi
          else
            if [ -f backend/.python-version ]; then
              ver=$(cat backend/.python-version | tr -d '\r' | head -n1)
              echo "PYTHON_VERSION=$ver" >> $GITHUB_OUTPUT
            else
              echo "Error: backend/.python-version not found" >&2
              exit 1
            fi
          fi

      - name: Set branch and commit info
        id: set_branch_info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "BRANCH_NAME=manual" >> $GITHUB_OUTPUT
            echo "COMMIT_SHA=manual" >> $GITHUB_OUTPUT
          else
            # Use GitHub context directly
            echo "BRANCH_NAME=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            short_sha="${{ github.sha }}"
            echo "COMMIT_SHA=${short_sha:0:7}" >> $GITHUB_OUTPUT
          fi

      - name: Build image
        run: docker build backend --file .docker/Dockerfile.backend --tag ${{ github.event.repository.name }} --build-arg PYTHON_VERSION=${{ steps.set_python_version.outputs.PYTHON_VERSION }}

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image name
        id: set_image_name
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}
          echo "IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')" >> $GITHUB_OUTPUT

      - name: Determine Docker tags
        id: determine_tags
        run: |
          BRANCH_NAME="${{ steps.set_branch_info.outputs.BRANCH_NAME }}"
          COMMIT_SHA="${{ steps.set_branch_info.outputs.COMMIT_SHA }}"
          RELEASE_VERSION="${{ inputs.release_version }}"

          TAGS=""

          # Always tag with commit SHA (except manual)
          if [ "$COMMIT_SHA" != "manual" ]; then
            TAGS="$TAGS ${{ steps.set_image_name.outputs.IMAGE_ID }}:$COMMIT_SHA"
          fi

          # Branch-specific tagging
          if [ "$BRANCH_NAME" = "production" ]; then
            # Production branch: tag with 'latest'
            TAGS="$TAGS ${{ steps.set_image_name.outputs.IMAGE_ID }}:latest"
          elif [ "$BRANCH_NAME" = "dev" ]; then
            # Dev branch: tag with 'dev'
            TAGS="$TAGS ${{ steps.set_image_name.outputs.IMAGE_ID }}:dev"
          fi

          # If a release happened in this CI run (non-empty version), also tag with version
          if [ -n "$RELEASE_VERSION" ] && [ "$RELEASE_VERSION" != "" ]; then
            TAGS="$TAGS ${{ steps.set_image_name.outputs.IMAGE_ID }}:$RELEASE_VERSION"
            echo "ðŸŽ‰ Adding release tag: $RELEASE_VERSION"
          fi

          # For manual dispatch, use the legacy tag
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAGS="$TAGS ${{ steps.set_image_name.outputs.IMAGE_ID }}:${{ github.event.inputs.release_tag }}"
          fi

          echo "Docker tags to apply: $TAGS"
          echo "TAGS=$TAGS" >> $GITHUB_OUTPUT

      - name: Tag the Docker image
        run: |
          for tag in ${{ steps.determine_tags.outputs.TAGS }}; do
            echo "Tagging with: $tag"
            docker tag ${{ github.event.repository.name }} $tag
          done

      - name: Push the Docker image
        run: |
          for tag in ${{ steps.determine_tags.outputs.TAGS }}; do
            echo "Pushing: $tag"
            docker push $tag
          done
