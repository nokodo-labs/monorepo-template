name: Main CI/CD Pipeline

on:
  pull_request:
    branches: [dev, production, stable]
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches: [dev, production, stable]
  workflow_dispatch:
    inputs:
      python_version:
        description: "Python version to use for the workflow"
        required: false
        default: ""

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' || !github.event.pull_request.draft }}
    permissions:
      contents: read
      pull-requests: read
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      docker: ${{ steps.changes.outputs.docker }}
      github_actions: ${{ steps.changes.outputs.github_actions }}
      python_version: ${{ steps.python_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
            docker:
              - '.docker/**'
            github_actions:
              - '.github/workflows/**'
            release:
              - 'tools/release_please/**'

      - name: Detect Python Version
        id: python_version
        run: |
          input_python_version="${{ github.event.inputs.python_version }}"
          if [ -n "$input_python_version" ]; then
            python_version="$input_python_version"
            echo "Using manually supplied Python version: $python_version"
          elif [ -f backend/.python-version ]; then
            python_version=$(cat backend/.python-version | tr -d '\r' | head -n1)
            echo "Using stable Python version from .python-version: $python_version"
          else
            echo "Error: .python-version file missing and no input provided." >&2
            exit 1
          fi
          echo "version=$python_version" >> $GITHUB_OUTPUT

  backend-ci:
    name: Backend CI
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.github_actions == 'true'
    uses: ./.github/workflows/backend-ci.yml
    secrets: inherit
    with:
      python_version: ${{ needs.detect-changes.outputs.python_version }}

  frontend-ci:
    name: Frontend CI
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true' || needs.detect-changes.outputs.github_actions == 'true'
    uses: ./.github/workflows/frontend-ci.yml
    secrets: inherit

  release:
    name: Release
    needs: [backend-ci, frontend-ci]
    if: ${{ !cancelled() && (needs.backend-ci.result == 'success' || needs.backend-ci.result == 'skipped') && (needs.frontend-ci.result == 'success' || needs.frontend-ci.result == 'skipped') && (github.ref_name == 'dev' || github.ref_name == 'stable') && github.event_name == 'push' }}
    uses: ./.github/workflows/release.yml
    secrets: inherit
    permissions:
      contents: write
      pull-requests: write
      packages: write

  docker-build-and-deploy:
    name: Docker build and Deploy
    needs: [detect-changes, backend-ci, frontend-ci, release]
    permissions:
      contents: read
      packages: write
    if: ${{ !cancelled() && github.event_name == 'push' && github.ref_type == 'branch' && github.ref_name != 'stable' && (needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.docker == 'true') || needs.release.outputs.version != '' || needs.detect-changes.outputs.github_actions == 'true' }}
    uses: ./.github/workflows/docker-build-and-deploy.yml
    secrets: inherit
    with:
      python_version: ${{ needs.detect-changes.outputs.python_version }}
      release_version: ${{ needs.release.outputs.version }}
